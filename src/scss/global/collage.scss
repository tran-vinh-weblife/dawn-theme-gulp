@import "./_settings/core.scss";


.collage {
    $self: &;
    display: grid;
    @include mq($mq-tab, max) {
        grid-column-gap: var(--grid-mobile-horizontal-spacing);
        grid-row-gap: var(--grid-mobile-vertical-spacing);
    }
    @include mq($mq-tab) {
        grid-auto-flow: column;
        grid-column-gap: var(--grid-desktop-horizontal-spacing);
        grid-row-gap: var(--grid-desktop-vertical-spacing);
        grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    &--mobile {
        @include mq($mq-tab, max) {
        grid-template-columns: repeat(2, minmax(0, 1fr));
        #{$self}__item--left {
            &:nth-child(3n - 2) {
            grid-column: span 2;
            &:nth-last-child(2) {
                grid-column: span 1;
            }
            }
            &:nth-child(3n) {
            grid-column-start: 2;
            }
        }
        #{$self}__item--right {
            &:nth-child(3n -2) {
            grid-column-start: 1;
            &:last-child {
                grid-column: span 2;
            }
            }
            &:nth-child(3n) {
            grid-column: 1 / span 2;
            }
        }
        }
    }

    &-card {
        background: rgba(var(--color-background), 1);
        border-radius: var(--card-corner-radius);
        border: var(--card-border-width) solid
        rgba(var(--color-foreground), var(--card-border-opacity));
        height: 100%;
        padding: var(--card-image-padding);
        position: relative;
        &:after {
        border-radius: var(--card-corner-radius);
        box-shadow: var(--card-shadow-horizontal-offset)
            var(--card-shadow-vertical-offset) var(--card-shadow-blur-radius)
            rgba(var(--color-shadow), var(--card-shadow-opacity));
        content: "";
        position: absolute;
        width: calc(var(--card-border-width) * 2 + 100%);
        height: calc(var(--card-border-width) * 2 + 100%);
        top: calc(var(--card-border-width) * -1);
        left: calc(var(--card-border-width) * -1);
        z-index: -1;
        }
        .media {
        border-radius: calc(
            var(--card-corner-radius) - var(--card-border-width) -
            var(--card-image-padding)
        );
        height: 100%;
        overflow: hidden;
        }
        .deferred-media {
        height: 100%;
        overflow: visible;
        }
        .deferred-media__poster {
        background-color: transparent;
        border: 0;
        &:after {
            content: "";
            position: absolute;
            z-index: 1;
            bottom: calc(var(--card-border-width) * -1);
            left: calc(var(--card-border-width) * -1);
            right: calc(var(--card-border-width) * -1);
            top: calc(var(--card-border-width) * -1);
            outline-offset: 0.3rem;
        }
        &:focus {
            &:after {
            box-shadow: 0 0 0 0.3rem rgba(var(--color-background), 1),
                0 0 0.5rem 0.4rem rgba(var(--color-foreground), 0.3);
            outline: 0.2rem solid rgba(var(--color-foreground), 0.5);
            }
            &:not(:focus-visible) {
            outline: none;
            box-shadow: none;
            &:after {
                outline: none;
                box-shadow: none;
            }
            }
            outline: none;
            box-shadow: none;
        }
        &:focus-visible {
            &:after {
            box-shadow: 0 0 0 0.3rem rgba(var(--color-background), 1),
                0 0 0.5rem 0.4rem rgba(var(--color-foreground), 0.3);
            outline: 0.2rem solid rgba(var(--color-foreground), 0.5);
            }
        }
        }

        &__link {
        display: block;
        height: 100%;
        }

        &-spacing {
        img {
            object-fit: contain;
        }
        }
    }

    &-wrapper-title {
        margin-top: 0;
        margin-bottom: 3rem;
    }

    &__item {
        @include mq($mq-tab) {
        &--left {
            &:nth-child(3n) {
            grid-column-start: 3;
            }
        }
        &--right {
            &:nth-child(3n-1) {
            &:last-child {
                grid-column: span 2;
            }
            }
            &:nth-child(3n) {
            grid-column: 2 / span 2;
            grid-row: span 2;
            }
        }
        &--collection {
            &:only-child {
                justify-self: center;
                max-width: 73rem;
                width: 100%;
            }
        }
        &--product {
            &:only-child {
                justify-self: center;
                max-width: 73rem;
                width: 100%;
            }
        }
        }

        > * {
            width: 100%;
        }
        #{$self}__content {
            flex-grow: initial;
        }
    }
}
